#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Model.DocumentFlowManagement
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="eInvoice")]
	public partial class FlowEntityDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDocumentFlowControl(DocumentFlowControl instance);
    partial void UpdateDocumentFlowControl(DocumentFlowControl instance);
    partial void DeleteDocumentFlowControl(DocumentFlowControl instance);
    partial void InsertDocumentFlowStep(DocumentFlowStep instance);
    partial void UpdateDocumentFlowStep(DocumentFlowStep instance);
    partial void DeleteDocumentFlowStep(DocumentFlowStep instance);
    partial void InsertCDS_Document(CDS_Document instance);
    partial void UpdateCDS_Document(CDS_Document instance);
    partial void DeleteCDS_Document(CDS_Document instance);
    partial void InsertDocumentType(DocumentType instance);
    partial void UpdateDocumentType(DocumentType instance);
    partial void DeleteDocumentType(DocumentType instance);
    partial void InsertDocumentProcessLog(DocumentProcessLog instance);
    partial void UpdateDocumentProcessLog(DocumentProcessLog instance);
    partial void DeleteDocumentProcessLog(DocumentProcessLog instance);
    partial void InsertOrganization(Organization instance);
    partial void UpdateOrganization(Organization instance);
    partial void DeleteOrganization(Organization instance);
    partial void InsertCategoryDefinition(CategoryDefinition instance);
    partial void UpdateCategoryDefinition(CategoryDefinition instance);
    partial void DeleteCategoryDefinition(CategoryDefinition instance);
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    partial void InsertLevelExpression(LevelExpression instance);
    partial void UpdateLevelExpression(LevelExpression instance);
    partial void DeleteLevelExpression(LevelExpression instance);
    partial void InsertBusinessRelationship(BusinessRelationship instance);
    partial void UpdateBusinessRelationship(BusinessRelationship instance);
    partial void DeleteBusinessRelationship(BusinessRelationship instance);
    partial void InsertEnterpriseGroup(EnterpriseGroup instance);
    partial void UpdateEnterpriseGroup(EnterpriseGroup instance);
    partial void DeleteEnterpriseGroup(EnterpriseGroup instance);
    partial void InsertEnterpriseGroupMember(EnterpriseGroupMember instance);
    partial void UpdateEnterpriseGroupMember(EnterpriseGroupMember instance);
    partial void DeleteEnterpriseGroupMember(EnterpriseGroupMember instance);
    partial void InsertDocumentTypeFlow(DocumentTypeFlow instance);
    partial void UpdateDocumentTypeFlow(DocumentTypeFlow instance);
    partial void DeleteDocumentTypeFlow(DocumentTypeFlow instance);
    partial void InsertBusinessType(BusinessType instance);
    partial void UpdateBusinessType(BusinessType instance);
    partial void DeleteBusinessType(BusinessType instance);
    partial void InsertCommonDocumentTypeFlow(CommonDocumentTypeFlow instance);
    partial void UpdateCommonDocumentTypeFlow(CommonDocumentTypeFlow instance);
    partial void DeleteCommonDocumentTypeFlow(CommonDocumentTypeFlow instance);
    partial void InsertDocumentFlowBranch(DocumentFlowBranch instance);
    partial void UpdateDocumentFlowBranch(DocumentFlowBranch instance);
    partial void DeleteDocumentFlowBranch(DocumentFlowBranch instance);
    partial void InsertDocumentFlow(DocumentFlow instance);
    partial void UpdateDocumentFlow(DocumentFlow instance);
    partial void DeleteDocumentFlow(DocumentFlow instance);
    #endregion
		
		public FlowEntityDataContext() : 
				base(global::Model.Properties.Settings.Default.eInvoiceConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FlowEntityDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FlowEntityDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FlowEntityDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FlowEntityDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DocumentFlowControl> DocumentFlowControl
		{
			get
			{
				return this.GetTable<DocumentFlowControl>();
			}
		}
		
		public System.Data.Linq.Table<DocumentFlowStep> DocumentFlowStep
		{
			get
			{
				return this.GetTable<DocumentFlowStep>();
			}
		}
		
		public System.Data.Linq.Table<CDS_Document> CDS_Document
		{
			get
			{
				return this.GetTable<CDS_Document>();
			}
		}
		
		public System.Data.Linq.Table<DocumentType> DocumentType
		{
			get
			{
				return this.GetTable<DocumentType>();
			}
		}
		
		public System.Data.Linq.Table<DocumentProcessLog> DocumentProcessLog
		{
			get
			{
				return this.GetTable<DocumentProcessLog>();
			}
		}
		
		public System.Data.Linq.Table<Organization> Organization
		{
			get
			{
				return this.GetTable<Organization>();
			}
		}
		
		public System.Data.Linq.Table<CategoryDefinition> CategoryDefinition
		{
			get
			{
				return this.GetTable<CategoryDefinition>();
			}
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfile
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
		
		public System.Data.Linq.Table<LevelExpression> LevelExpression
		{
			get
			{
				return this.GetTable<LevelExpression>();
			}
		}
		
		public System.Data.Linq.Table<BusinessRelationship> BusinessRelationship
		{
			get
			{
				return this.GetTable<BusinessRelationship>();
			}
		}
		
		public System.Data.Linq.Table<EnterpriseGroup> EnterpriseGroup
		{
			get
			{
				return this.GetTable<EnterpriseGroup>();
			}
		}
		
		public System.Data.Linq.Table<EnterpriseGroupMember> EnterpriseGroupMember
		{
			get
			{
				return this.GetTable<EnterpriseGroupMember>();
			}
		}
		
		public System.Data.Linq.Table<DocumentTypeFlow> DocumentTypeFlow
		{
			get
			{
				return this.GetTable<DocumentTypeFlow>();
			}
		}
		
		public System.Data.Linq.Table<BusinessType> BusinessType
		{
			get
			{
				return this.GetTable<BusinessType>();
			}
		}
		
		public System.Data.Linq.Table<CommonDocumentTypeFlow> CommonDocumentTypeFlow
		{
			get
			{
				return this.GetTable<CommonDocumentTypeFlow>();
			}
		}
		
		public System.Data.Linq.Table<DocumentFlowBranch> DocumentFlowBranch
		{
			get
			{
				return this.GetTable<DocumentFlowBranch>();
			}
		}
		
		public System.Data.Linq.Table<DocumentFlow> DocumentFlow
		{
			get
			{
				return this.GetTable<DocumentFlow>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="center.DocumentFlowControl")]
	public partial class DocumentFlowControl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StepID;
		
		private System.Nullable<int> _NextStep;
		
		private System.Nullable<int> _PrevStep;
		
		private int _LevelID;
		
		private int _FlowID;
		
		private EntitySet<DocumentFlowControl> _DocumentFlowControl2;
		
		private EntitySet<DocumentFlowControl> _DocumentFlowControl4;
		
		private EntitySet<DocumentFlowStep> _DocumentFlowStep;
		
		private EntitySet<DocumentFlowBranch> _BranchFlow;
		
		private EntitySet<DocumentFlowBranch> _FlowAsBranch;
		
		private EntitySet<DocumentFlow> _DocumentFlowAsInitStep;
		
		private EntityRef<DocumentFlowControl> _DocumentFlowControl1;
		
		private EntityRef<DocumentFlowControl> _DocumentFlowControl3;
		
		private EntityRef<LevelExpression> _LevelExpression;
		
		private EntityRef<DocumentFlow> _DocumentFlow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStepIDChanging(int value);
    partial void OnStepIDChanged();
    partial void OnNextStepChanging(System.Nullable<int> value);
    partial void OnNextStepChanged();
    partial void OnPrevStepChanging(System.Nullable<int> value);
    partial void OnPrevStepChanged();
    partial void OnLevelIDChanging(int value);
    partial void OnLevelIDChanged();
    partial void OnFlowIDChanging(int value);
    partial void OnFlowIDChanged();
    #endregion
		
		public DocumentFlowControl()
		{
			this._DocumentFlowControl2 = new EntitySet<DocumentFlowControl>(new Action<DocumentFlowControl>(this.attach_DocumentFlowControl2), new Action<DocumentFlowControl>(this.detach_DocumentFlowControl2));
			this._DocumentFlowControl4 = new EntitySet<DocumentFlowControl>(new Action<DocumentFlowControl>(this.attach_DocumentFlowControl4), new Action<DocumentFlowControl>(this.detach_DocumentFlowControl4));
			this._DocumentFlowStep = new EntitySet<DocumentFlowStep>(new Action<DocumentFlowStep>(this.attach_DocumentFlowStep), new Action<DocumentFlowStep>(this.detach_DocumentFlowStep));
			this._BranchFlow = new EntitySet<DocumentFlowBranch>(new Action<DocumentFlowBranch>(this.attach_BranchFlow), new Action<DocumentFlowBranch>(this.detach_BranchFlow));
			this._FlowAsBranch = new EntitySet<DocumentFlowBranch>(new Action<DocumentFlowBranch>(this.attach_FlowAsBranch), new Action<DocumentFlowBranch>(this.detach_FlowAsBranch));
			this._DocumentFlowAsInitStep = new EntitySet<DocumentFlow>(new Action<DocumentFlow>(this.attach_DocumentFlowAsInitStep), new Action<DocumentFlow>(this.detach_DocumentFlowAsInitStep));
			this._DocumentFlowControl1 = default(EntityRef<DocumentFlowControl>);
			this._DocumentFlowControl3 = default(EntityRef<DocumentFlowControl>);
			this._LevelExpression = default(EntityRef<LevelExpression>);
			this._DocumentFlow = default(EntityRef<DocumentFlow>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StepID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StepID
		{
			get
			{
				return this._StepID;
			}
			set
			{
				if ((this._StepID != value))
				{
					this.OnStepIDChanging(value);
					this.SendPropertyChanging();
					this._StepID = value;
					this.SendPropertyChanged("StepID");
					this.OnStepIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextStep", DbType="Int")]
		public System.Nullable<int> NextStep
		{
			get
			{
				return this._NextStep;
			}
			set
			{
				if ((this._NextStep != value))
				{
					if (this._DocumentFlowControl1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNextStepChanging(value);
					this.SendPropertyChanging();
					this._NextStep = value;
					this.SendPropertyChanged("NextStep");
					this.OnNextStepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrevStep", DbType="Int")]
		public System.Nullable<int> PrevStep
		{
			get
			{
				return this._PrevStep;
			}
			set
			{
				if ((this._PrevStep != value))
				{
					if (this._DocumentFlowControl3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrevStepChanging(value);
					this.SendPropertyChanging();
					this._PrevStep = value;
					this.SendPropertyChanged("PrevStep");
					this.OnPrevStepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelID", DbType="Int NOT NULL")]
		public int LevelID
		{
			get
			{
				return this._LevelID;
			}
			set
			{
				if ((this._LevelID != value))
				{
					if (this._LevelExpression.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLevelIDChanging(value);
					this.SendPropertyChanging();
					this._LevelID = value;
					this.SendPropertyChanged("LevelID");
					this.OnLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlowID", DbType="Int NOT NULL")]
		public int FlowID
		{
			get
			{
				return this._FlowID;
			}
			set
			{
				if ((this._FlowID != value))
				{
					if (this._DocumentFlow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFlowIDChanging(value);
					this.SendPropertyChanging();
					this._FlowID = value;
					this.SendPropertyChanged("FlowID");
					this.OnFlowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentFlowControl_DocumentFlowControl", Storage="_DocumentFlowControl2", ThisKey="StepID", OtherKey="NextStep")]
		public EntitySet<DocumentFlowControl> AsNextStepFor
		{
			get
			{
				return this._DocumentFlowControl2;
			}
			set
			{
				this._DocumentFlowControl2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentFlowControl_DocumentFlowControl1", Storage="_DocumentFlowControl4", ThisKey="StepID", OtherKey="PrevStep")]
		public EntitySet<DocumentFlowControl> AsPrevStepFor
		{
			get
			{
				return this._DocumentFlowControl4;
			}
			set
			{
				this._DocumentFlowControl4.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentFlowControl_DocumentFlowStep", Storage="_DocumentFlowStep", ThisKey="StepID", OtherKey="CurrentFlowStep")]
		public EntitySet<DocumentFlowStep> DocumentFlowStep
		{
			get
			{
				return this._DocumentFlowStep;
			}
			set
			{
				this._DocumentFlowStep.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentFlowControl_DocumentFlowBranch", Storage="_BranchFlow", ThisKey="StepID", OtherKey="StepID")]
		public EntitySet<DocumentFlowBranch> BranchFlow
		{
			get
			{
				return this._BranchFlow;
			}
			set
			{
				this._BranchFlow.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentFlowControl_DocumentFlowBranch1", Storage="_FlowAsBranch", ThisKey="StepID", OtherKey="BranchStep")]
		public EntitySet<DocumentFlowBranch> FlowAsBranch
		{
			get
			{
				return this._FlowAsBranch;
			}
			set
			{
				this._FlowAsBranch.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentFlowControl_DocumentFlow", Storage="_DocumentFlowAsInitStep", ThisKey="StepID", OtherKey="InitialStep")]
		public EntitySet<DocumentFlow> DocumentFlowAsInitStep
		{
			get
			{
				return this._DocumentFlowAsInitStep;
			}
			set
			{
				this._DocumentFlowAsInitStep.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentFlowControl_DocumentFlowControl", Storage="_DocumentFlowControl1", ThisKey="NextStep", OtherKey="StepID", IsForeignKey=true)]
		public DocumentFlowControl NextStepItem
		{
			get
			{
				return this._DocumentFlowControl1.Entity;
			}
			set
			{
				DocumentFlowControl previousValue = this._DocumentFlowControl1.Entity;
				if (((previousValue != value) 
							|| (this._DocumentFlowControl1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentFlowControl1.Entity = null;
						previousValue.AsNextStepFor.Remove(this);
					}
					this._DocumentFlowControl1.Entity = value;
					if ((value != null))
					{
						value.AsNextStepFor.Add(this);
						this._NextStep = value.StepID;
					}
					else
					{
						this._NextStep = default(Nullable<int>);
					}
					this.SendPropertyChanged("NextStepItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentFlowControl_DocumentFlowControl1", Storage="_DocumentFlowControl3", ThisKey="PrevStep", OtherKey="StepID", IsForeignKey=true)]
		public DocumentFlowControl PrevStepItem
		{
			get
			{
				return this._DocumentFlowControl3.Entity;
			}
			set
			{
				DocumentFlowControl previousValue = this._DocumentFlowControl3.Entity;
				if (((previousValue != value) 
							|| (this._DocumentFlowControl3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentFlowControl3.Entity = null;
						previousValue.AsPrevStepFor.Remove(this);
					}
					this._DocumentFlowControl3.Entity = value;
					if ((value != null))
					{
						value.AsPrevStepFor.Add(this);
						this._PrevStep = value.StepID;
					}
					else
					{
						this._PrevStep = default(Nullable<int>);
					}
					this.SendPropertyChanged("PrevStepItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelExpression_DocumentFlowControl", Storage="_LevelExpression", ThisKey="LevelID", OtherKey="LevelID", IsForeignKey=true)]
		public LevelExpression LevelExpression
		{
			get
			{
				return this._LevelExpression.Entity;
			}
			set
			{
				LevelExpression previousValue = this._LevelExpression.Entity;
				if (((previousValue != value) 
							|| (this._LevelExpression.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LevelExpression.Entity = null;
						previousValue.DocumentFlowControl.Remove(this);
					}
					this._LevelExpression.Entity = value;
					if ((value != null))
					{
						value.DocumentFlowControl.Add(this);
						this._LevelID = value.LevelID;
					}
					else
					{
						this._LevelID = default(int);
					}
					this.SendPropertyChanged("LevelExpression");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentFlow_DocumentFlowControl", Storage="_DocumentFlow", ThisKey="FlowID", OtherKey="FlowID", IsForeignKey=true)]
		public DocumentFlow DocumentFlow
		{
			get
			{
				return this._DocumentFlow.Entity;
			}
			set
			{
				DocumentFlow previousValue = this._DocumentFlow.Entity;
				if (((previousValue != value) 
							|| (this._DocumentFlow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentFlow.Entity = null;
						previousValue.DocumentFlowControl.Remove(this);
					}
					this._DocumentFlow.Entity = value;
					if ((value != null))
					{
						value.DocumentFlowControl.Add(this);
						this._FlowID = value.FlowID;
					}
					else
					{
						this._FlowID = default(int);
					}
					this.SendPropertyChanged("DocumentFlow");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocumentFlowControl2(DocumentFlowControl entity)
		{
			this.SendPropertyChanging();
			entity.NextStepItem = this;
		}
		
		private void detach_DocumentFlowControl2(DocumentFlowControl entity)
		{
			this.SendPropertyChanging();
			entity.NextStepItem = null;
		}
		
		private void attach_DocumentFlowControl4(DocumentFlowControl entity)
		{
			this.SendPropertyChanging();
			entity.PrevStepItem = this;
		}
		
		private void detach_DocumentFlowControl4(DocumentFlowControl entity)
		{
			this.SendPropertyChanging();
			entity.PrevStepItem = null;
		}
		
		private void attach_DocumentFlowStep(DocumentFlowStep entity)
		{
			this.SendPropertyChanging();
			entity.DocumentFlowControl = this;
		}
		
		private void detach_DocumentFlowStep(DocumentFlowStep entity)
		{
			this.SendPropertyChanging();
			entity.DocumentFlowControl = null;
		}
		
		private void attach_BranchFlow(DocumentFlowBranch entity)
		{
			this.SendPropertyChanging();
			entity.BranchStepFrom = this;
		}
		
		private void detach_BranchFlow(DocumentFlowBranch entity)
		{
			this.SendPropertyChanging();
			entity.BranchStepFrom = null;
		}
		
		private void attach_FlowAsBranch(DocumentFlowBranch entity)
		{
			this.SendPropertyChanging();
			entity.BranchStepItem = this;
		}
		
		private void detach_FlowAsBranch(DocumentFlowBranch entity)
		{
			this.SendPropertyChanging();
			entity.BranchStepItem = null;
		}
		
		private void attach_DocumentFlowAsInitStep(DocumentFlow entity)
		{
			this.SendPropertyChanging();
			entity.InitStepItem = this;
		}
		
		private void detach_DocumentFlowAsInitStep(DocumentFlow entity)
		{
			this.SendPropertyChanging();
			entity.InitStepItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="center.DocumentFlowStep")]
	public partial class DocumentFlowStep : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocID;
		
		private int _CurrentFlowStep;
		
		private EntityRef<DocumentFlowControl> _DocumentFlowControl;
		
		private EntityRef<CDS_Document> _CDS_Document;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocIDChanging(int value);
    partial void OnDocIDChanged();
    partial void OnCurrentFlowStepChanging(int value);
    partial void OnCurrentFlowStepChanged();
    #endregion
		
		public DocumentFlowStep()
		{
			this._DocumentFlowControl = default(EntityRef<DocumentFlowControl>);
			this._CDS_Document = default(EntityRef<CDS_Document>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DocID
		{
			get
			{
				return this._DocID;
			}
			set
			{
				if ((this._DocID != value))
				{
					if (this._CDS_Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocIDChanging(value);
					this.SendPropertyChanging();
					this._DocID = value;
					this.SendPropertyChanged("DocID");
					this.OnDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentFlowStep", DbType="Int NOT NULL")]
		public int CurrentFlowStep
		{
			get
			{
				return this._CurrentFlowStep;
			}
			set
			{
				if ((this._CurrentFlowStep != value))
				{
					if (this._DocumentFlowControl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrentFlowStepChanging(value);
					this.SendPropertyChanging();
					this._CurrentFlowStep = value;
					this.SendPropertyChanged("CurrentFlowStep");
					this.OnCurrentFlowStepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentFlowControl_DocumentFlowStep", Storage="_DocumentFlowControl", ThisKey="CurrentFlowStep", OtherKey="StepID", IsForeignKey=true)]
		public DocumentFlowControl DocumentFlowControl
		{
			get
			{
				return this._DocumentFlowControl.Entity;
			}
			set
			{
				DocumentFlowControl previousValue = this._DocumentFlowControl.Entity;
				if (((previousValue != value) 
							|| (this._DocumentFlowControl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentFlowControl.Entity = null;
						previousValue.DocumentFlowStep.Remove(this);
					}
					this._DocumentFlowControl.Entity = value;
					if ((value != null))
					{
						value.DocumentFlowStep.Add(this);
						this._CurrentFlowStep = value.StepID;
					}
					else
					{
						this._CurrentFlowStep = default(int);
					}
					this.SendPropertyChanged("DocumentFlowControl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CDS_Document_DocumentFlowStep", Storage="_CDS_Document", ThisKey="DocID", OtherKey="DocID", IsForeignKey=true)]
		public CDS_Document CDS_Document
		{
			get
			{
				return this._CDS_Document.Entity;
			}
			set
			{
				CDS_Document previousValue = this._CDS_Document.Entity;
				if (((previousValue != value) 
							|| (this._CDS_Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CDS_Document.Entity = null;
						previousValue.DocumentFlowStep = null;
					}
					this._CDS_Document.Entity = value;
					if ((value != null))
					{
						value.DocumentFlowStep = this;
						this._DocID = value.DocID;
					}
					else
					{
						this._DocID = default(int);
					}
					this.SendPropertyChanged("CDS_Document");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CDS_Document")]
	public partial class CDS_Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocID;
		
		private System.Nullable<int> _DocType;
		
		private System.DateTime _DocDate;
		
		private System.Nullable<int> _CurrentStep;
		
		private EntityRef<DocumentFlowStep> _DocumentFlowStep;
		
		private EntitySet<DocumentProcessLog> _DocumentProcessLog;
		
		private EntityRef<DocumentType> _DocumentType;
		
		private EntityRef<LevelExpression> _LevelExpression;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocIDChanging(int value);
    partial void OnDocIDChanged();
    partial void OnDocTypeChanging(System.Nullable<int> value);
    partial void OnDocTypeChanged();
    partial void OnDocDateChanging(System.DateTime value);
    partial void OnDocDateChanged();
    partial void OnCurrentStepChanging(System.Nullable<int> value);
    partial void OnCurrentStepChanged();
    #endregion
		
		public CDS_Document()
		{
			this._DocumentFlowStep = default(EntityRef<DocumentFlowStep>);
			this._DocumentProcessLog = new EntitySet<DocumentProcessLog>(new Action<DocumentProcessLog>(this.attach_DocumentProcessLog), new Action<DocumentProcessLog>(this.detach_DocumentProcessLog));
			this._DocumentType = default(EntityRef<DocumentType>);
			this._LevelExpression = default(EntityRef<LevelExpression>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DocID
		{
			get
			{
				return this._DocID;
			}
			set
			{
				if ((this._DocID != value))
				{
					this.OnDocIDChanging(value);
					this.SendPropertyChanging();
					this._DocID = value;
					this.SendPropertyChanged("DocID");
					this.OnDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocType", DbType="Int")]
		public System.Nullable<int> DocType
		{
			get
			{
				return this._DocType;
			}
			set
			{
				if ((this._DocType != value))
				{
					if (this._DocumentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocTypeChanging(value);
					this.SendPropertyChanging();
					this._DocType = value;
					this.SendPropertyChanged("DocType");
					this.OnDocTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocDate", DbType="DateTime NOT NULL")]
		public System.DateTime DocDate
		{
			get
			{
				return this._DocDate;
			}
			set
			{
				if ((this._DocDate != value))
				{
					this.OnDocDateChanging(value);
					this.SendPropertyChanging();
					this._DocDate = value;
					this.SendPropertyChanged("DocDate");
					this.OnDocDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentStep", DbType="Int")]
		public System.Nullable<int> CurrentStep
		{
			get
			{
				return this._CurrentStep;
			}
			set
			{
				if ((this._CurrentStep != value))
				{
					if (this._LevelExpression.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrentStepChanging(value);
					this.SendPropertyChanging();
					this._CurrentStep = value;
					this.SendPropertyChanged("CurrentStep");
					this.OnCurrentStepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CDS_Document_DocumentFlowStep", Storage="_DocumentFlowStep", ThisKey="DocID", OtherKey="DocID", IsUnique=true, IsForeignKey=false)]
		public DocumentFlowStep DocumentFlowStep
		{
			get
			{
				return this._DocumentFlowStep.Entity;
			}
			set
			{
				DocumentFlowStep previousValue = this._DocumentFlowStep.Entity;
				if (((previousValue != value) 
							|| (this._DocumentFlowStep.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentFlowStep.Entity = null;
						previousValue.CDS_Document = null;
					}
					this._DocumentFlowStep.Entity = value;
					if ((value != null))
					{
						value.CDS_Document = this;
					}
					this.SendPropertyChanged("DocumentFlowStep");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CDS_Document_DocumentProcessLog", Storage="_DocumentProcessLog", ThisKey="DocID", OtherKey="DocID")]
		public EntitySet<DocumentProcessLog> DocumentProcessLog
		{
			get
			{
				return this._DocumentProcessLog;
			}
			set
			{
				this._DocumentProcessLog.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentType_CDS_Document", Storage="_DocumentType", ThisKey="DocType", OtherKey="TypeID", IsForeignKey=true)]
		public DocumentType DocumentType
		{
			get
			{
				return this._DocumentType.Entity;
			}
			set
			{
				DocumentType previousValue = this._DocumentType.Entity;
				if (((previousValue != value) 
							|| (this._DocumentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentType.Entity = null;
						previousValue.CDS_Document.Remove(this);
					}
					this._DocumentType.Entity = value;
					if ((value != null))
					{
						value.CDS_Document.Add(this);
						this._DocType = value.TypeID;
					}
					else
					{
						this._DocType = default(Nullable<int>);
					}
					this.SendPropertyChanged("DocumentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelExpression_CDS_Document", Storage="_LevelExpression", ThisKey="CurrentStep", OtherKey="LevelID", IsForeignKey=true)]
		public LevelExpression LevelExpression
		{
			get
			{
				return this._LevelExpression.Entity;
			}
			set
			{
				LevelExpression previousValue = this._LevelExpression.Entity;
				if (((previousValue != value) 
							|| (this._LevelExpression.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LevelExpression.Entity = null;
						previousValue.CDS_Document.Remove(this);
					}
					this._LevelExpression.Entity = value;
					if ((value != null))
					{
						value.CDS_Document.Add(this);
						this._CurrentStep = value.LevelID;
					}
					else
					{
						this._CurrentStep = default(Nullable<int>);
					}
					this.SendPropertyChanged("LevelExpression");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocumentProcessLog(DocumentProcessLog entity)
		{
			this.SendPropertyChanging();
			entity.CDS_Document = this;
		}
		
		private void detach_DocumentProcessLog(DocumentProcessLog entity)
		{
			this.SendPropertyChanging();
			entity.CDS_Document = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentType")]
	public partial class DocumentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeID;
		
		private string _TypeName;
		
		private EntitySet<CDS_Document> _CDS_Document;
		
		private EntitySet<DocumentTypeFlow> _DocumentTypeFlow;
		
		private EntitySet<CommonDocumentTypeFlow> _CommonDocumentTypeFlow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public DocumentType()
		{
			this._CDS_Document = new EntitySet<CDS_Document>(new Action<CDS_Document>(this.attach_CDS_Document), new Action<CDS_Document>(this.detach_CDS_Document));
			this._DocumentTypeFlow = new EntitySet<DocumentTypeFlow>(new Action<DocumentTypeFlow>(this.attach_DocumentTypeFlow), new Action<DocumentTypeFlow>(this.detach_DocumentTypeFlow));
			this._CommonDocumentTypeFlow = new EntitySet<CommonDocumentTypeFlow>(new Action<CommonDocumentTypeFlow>(this.attach_CommonDocumentTypeFlow), new Action<CommonDocumentTypeFlow>(this.detach_CommonDocumentTypeFlow));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(128)")]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentType_CDS_Document", Storage="_CDS_Document", ThisKey="TypeID", OtherKey="DocType")]
		public EntitySet<CDS_Document> CDS_Document
		{
			get
			{
				return this._CDS_Document;
			}
			set
			{
				this._CDS_Document.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentType_DocumentTypeFlow", Storage="_DocumentTypeFlow", ThisKey="TypeID", OtherKey="TypeID")]
		public EntitySet<DocumentTypeFlow> DocumentTypeFlow
		{
			get
			{
				return this._DocumentTypeFlow;
			}
			set
			{
				this._DocumentTypeFlow.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentType_CommonDocumentTypeFlow", Storage="_CommonDocumentTypeFlow", ThisKey="TypeID", OtherKey="TypeID")]
		public EntitySet<CommonDocumentTypeFlow> CommonDocumentTypeFlow
		{
			get
			{
				return this._CommonDocumentTypeFlow;
			}
			set
			{
				this._CommonDocumentTypeFlow.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CDS_Document(CDS_Document entity)
		{
			this.SendPropertyChanging();
			entity.DocumentType = this;
		}
		
		private void detach_CDS_Document(CDS_Document entity)
		{
			this.SendPropertyChanging();
			entity.DocumentType = null;
		}
		
		private void attach_DocumentTypeFlow(DocumentTypeFlow entity)
		{
			this.SendPropertyChanging();
			entity.DocumentType = this;
		}
		
		private void detach_DocumentTypeFlow(DocumentTypeFlow entity)
		{
			this.SendPropertyChanging();
			entity.DocumentType = null;
		}
		
		private void attach_CommonDocumentTypeFlow(CommonDocumentTypeFlow entity)
		{
			this.SendPropertyChanging();
			entity.DocumentType = this;
		}
		
		private void detach_CommonDocumentTypeFlow(CommonDocumentTypeFlow entity)
		{
			this.SendPropertyChanging();
			entity.DocumentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentProcessLog")]
	public partial class DocumentProcessLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocID;
		
		private System.DateTime _StepDate;
		
		private int _FlowStep;
		
		private System.Nullable<int> _UID;
		
		private string _Description;
		
		private EntityRef<CDS_Document> _CDS_Document;
		
		private EntityRef<UserProfile> _UserProfile;
		
		private EntityRef<LevelExpression> _LevelExpression;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocIDChanging(int value);
    partial void OnDocIDChanged();
    partial void OnStepDateChanging(System.DateTime value);
    partial void OnStepDateChanged();
    partial void OnFlowStepChanging(int value);
    partial void OnFlowStepChanged();
    partial void OnUIDChanging(System.Nullable<int> value);
    partial void OnUIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public DocumentProcessLog()
		{
			this._CDS_Document = default(EntityRef<CDS_Document>);
			this._UserProfile = default(EntityRef<UserProfile>);
			this._LevelExpression = default(EntityRef<LevelExpression>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DocID
		{
			get
			{
				return this._DocID;
			}
			set
			{
				if ((this._DocID != value))
				{
					if (this._CDS_Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocIDChanging(value);
					this.SendPropertyChanging();
					this._DocID = value;
					this.SendPropertyChanged("DocID");
					this.OnDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StepDate", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime StepDate
		{
			get
			{
				return this._StepDate;
			}
			set
			{
				if ((this._StepDate != value))
				{
					this.OnStepDateChanging(value);
					this.SendPropertyChanging();
					this._StepDate = value;
					this.SendPropertyChanged("StepDate");
					this.OnStepDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlowStep", DbType="Int NOT NULL")]
		public int FlowStep
		{
			get
			{
				return this._FlowStep;
			}
			set
			{
				if ((this._FlowStep != value))
				{
					if (this._LevelExpression.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFlowStepChanging(value);
					this.SendPropertyChanging();
					this._FlowStep = value;
					this.SendPropertyChanged("FlowStep");
					this.OnFlowStepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int")]
		public System.Nullable<int> UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CDS_Document_DocumentProcessLog", Storage="_CDS_Document", ThisKey="DocID", OtherKey="DocID", IsForeignKey=true)]
		public CDS_Document CDS_Document
		{
			get
			{
				return this._CDS_Document.Entity;
			}
			set
			{
				CDS_Document previousValue = this._CDS_Document.Entity;
				if (((previousValue != value) 
							|| (this._CDS_Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CDS_Document.Entity = null;
						previousValue.DocumentProcessLog.Remove(this);
					}
					this._CDS_Document.Entity = value;
					if ((value != null))
					{
						value.DocumentProcessLog.Add(this);
						this._DocID = value.DocID;
					}
					else
					{
						this._DocID = default(int);
					}
					this.SendPropertyChanged("CDS_Document");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_DocumentProcessLog", Storage="_UserProfile", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.DocumentProcessLog.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.DocumentProcessLog.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelExpression_DocumentProcessLog", Storage="_LevelExpression", ThisKey="FlowStep", OtherKey="LevelID", IsForeignKey=true)]
		public LevelExpression LevelExpression
		{
			get
			{
				return this._LevelExpression.Entity;
			}
			set
			{
				LevelExpression previousValue = this._LevelExpression.Entity;
				if (((previousValue != value) 
							|| (this._LevelExpression.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LevelExpression.Entity = null;
						previousValue.DocumentProcessLog.Remove(this);
					}
					this._LevelExpression.Entity = value;
					if ((value != null))
					{
						value.DocumentProcessLog.Add(this);
						this._FlowStep = value.LevelID;
					}
					else
					{
						this._FlowStep = default(int);
					}
					this.SendPropertyChanged("LevelExpression");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Organization")]
	public partial class Organization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ContactName;
		
		private string _Fax;
		
		private string _LogoURL;
		
		private string _CompanyName;
		
		private int _CompanyID;
		
		private string _ReceiptNo;
		
		private string _Phone;
		
		private string _ContactFax;
		
		private string _ContactPhone;
		
		private string _ContactMobilePhone;
		
		private string _RegAddr;
		
		private string _UndertakerName;
		
		private string _Addr;
		
		private string _EnglishName;
		
		private string _EnglishAddr;
		
		private string _EnglishRegAddr;
		
		private string _ContactEmail;
		
		private string _UndertakerPhone;
		
		private string _UndertakerFax;
		
		private string _UndertakerMobilePhone;
		
		private string _InvoiceSignature;
		
		private string _UndertakerID;
		
		private string _ContactTitle;
		
		private EntitySet<BusinessRelationship> _BusinessRelationship;
		
		private EntitySet<BusinessRelationship> _BusinessRelationship1;
		
		private EntitySet<EnterpriseGroupMember> _EnterpriseGroupMember;
		
		private EntitySet<DocumentTypeFlow> _DocumentTypeFlow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnLogoURLChanging(string value);
    partial void OnLogoURLChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnReceiptNoChanging(string value);
    partial void OnReceiptNoChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnContactFaxChanging(string value);
    partial void OnContactFaxChanged();
    partial void OnContactPhoneChanging(string value);
    partial void OnContactPhoneChanged();
    partial void OnContactMobilePhoneChanging(string value);
    partial void OnContactMobilePhoneChanged();
    partial void OnRegAddrChanging(string value);
    partial void OnRegAddrChanged();
    partial void OnUndertakerNameChanging(string value);
    partial void OnUndertakerNameChanged();
    partial void OnAddrChanging(string value);
    partial void OnAddrChanged();
    partial void OnEnglishNameChanging(string value);
    partial void OnEnglishNameChanged();
    partial void OnEnglishAddrChanging(string value);
    partial void OnEnglishAddrChanged();
    partial void OnEnglishRegAddrChanging(string value);
    partial void OnEnglishRegAddrChanged();
    partial void OnContactEmailChanging(string value);
    partial void OnContactEmailChanged();
    partial void OnUndertakerPhoneChanging(string value);
    partial void OnUndertakerPhoneChanged();
    partial void OnUndertakerFaxChanging(string value);
    partial void OnUndertakerFaxChanged();
    partial void OnUndertakerMobilePhoneChanging(string value);
    partial void OnUndertakerMobilePhoneChanged();
    partial void OnInvoiceSignatureChanging(string value);
    partial void OnInvoiceSignatureChanged();
    partial void OnUndertakerIDChanging(string value);
    partial void OnUndertakerIDChanged();
    partial void OnContactTitleChanging(string value);
    partial void OnContactTitleChanged();
    #endregion
		
		public Organization()
		{
			this._BusinessRelationship = new EntitySet<BusinessRelationship>(new Action<BusinessRelationship>(this.attach_BusinessRelationship), new Action<BusinessRelationship>(this.detach_BusinessRelationship));
			this._BusinessRelationship1 = new EntitySet<BusinessRelationship>(new Action<BusinessRelationship>(this.attach_BusinessRelationship1), new Action<BusinessRelationship>(this.detach_BusinessRelationship1));
			this._EnterpriseGroupMember = new EntitySet<EnterpriseGroupMember>(new Action<EnterpriseGroupMember>(this.attach_EnterpriseGroupMember), new Action<EnterpriseGroupMember>(this.detach_EnterpriseGroupMember));
			this._DocumentTypeFlow = new EntitySet<DocumentTypeFlow>(new Action<DocumentTypeFlow>(this.attach_DocumentTypeFlow), new Action<DocumentTypeFlow>(this.detach_DocumentTypeFlow));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactName", DbType="NVarChar(50)")]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="NVarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoURL", DbType="NVarChar(200)")]
		public string LogoURL
		{
			get
			{
				return this._LogoURL;
			}
			set
			{
				if ((this._LogoURL != value))
				{
					this.OnLogoURLChanging(value);
					this.SendPropertyChanging();
					this._LogoURL = value;
					this.SendPropertyChanged("LogoURL");
					this.OnLogoURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(128)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiptNo", DbType="NVarChar(10)")]
		public string ReceiptNo
		{
			get
			{
				return this._ReceiptNo;
			}
			set
			{
				if ((this._ReceiptNo != value))
				{
					this.OnReceiptNoChanging(value);
					this.SendPropertyChanging();
					this._ReceiptNo = value;
					this.SendPropertyChanged("ReceiptNo");
					this.OnReceiptNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactFax", DbType="NVarChar(20)")]
		public string ContactFax
		{
			get
			{
				return this._ContactFax;
			}
			set
			{
				if ((this._ContactFax != value))
				{
					this.OnContactFaxChanging(value);
					this.SendPropertyChanging();
					this._ContactFax = value;
					this.SendPropertyChanged("ContactFax");
					this.OnContactFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPhone", DbType="NVarChar(20)")]
		public string ContactPhone
		{
			get
			{
				return this._ContactPhone;
			}
			set
			{
				if ((this._ContactPhone != value))
				{
					this.OnContactPhoneChanging(value);
					this.SendPropertyChanging();
					this._ContactPhone = value;
					this.SendPropertyChanged("ContactPhone");
					this.OnContactPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactMobilePhone", DbType="NVarChar(20)")]
		public string ContactMobilePhone
		{
			get
			{
				return this._ContactMobilePhone;
			}
			set
			{
				if ((this._ContactMobilePhone != value))
				{
					this.OnContactMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._ContactMobilePhone = value;
					this.SendPropertyChanged("ContactMobilePhone");
					this.OnContactMobilePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegAddr", DbType="NVarChar(256)")]
		public string RegAddr
		{
			get
			{
				return this._RegAddr;
			}
			set
			{
				if ((this._RegAddr != value))
				{
					this.OnRegAddrChanging(value);
					this.SendPropertyChanging();
					this._RegAddr = value;
					this.SendPropertyChanged("RegAddr");
					this.OnRegAddrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UndertakerName", DbType="NVarChar(50)")]
		public string UndertakerName
		{
			get
			{
				return this._UndertakerName;
			}
			set
			{
				if ((this._UndertakerName != value))
				{
					this.OnUndertakerNameChanging(value);
					this.SendPropertyChanging();
					this._UndertakerName = value;
					this.SendPropertyChanged("UndertakerName");
					this.OnUndertakerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Addr", DbType="NVarChar(256)")]
		public string Addr
		{
			get
			{
				return this._Addr;
			}
			set
			{
				if ((this._Addr != value))
				{
					this.OnAddrChanging(value);
					this.SendPropertyChanging();
					this._Addr = value;
					this.SendPropertyChanged("Addr");
					this.OnAddrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnglishName", DbType="NVarChar(50)")]
		public string EnglishName
		{
			get
			{
				return this._EnglishName;
			}
			set
			{
				if ((this._EnglishName != value))
				{
					this.OnEnglishNameChanging(value);
					this.SendPropertyChanging();
					this._EnglishName = value;
					this.SendPropertyChanged("EnglishName");
					this.OnEnglishNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnglishAddr", DbType="NVarChar(256)")]
		public string EnglishAddr
		{
			get
			{
				return this._EnglishAddr;
			}
			set
			{
				if ((this._EnglishAddr != value))
				{
					this.OnEnglishAddrChanging(value);
					this.SendPropertyChanging();
					this._EnglishAddr = value;
					this.SendPropertyChanged("EnglishAddr");
					this.OnEnglishAddrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnglishRegAddr", DbType="NVarChar(256)")]
		public string EnglishRegAddr
		{
			get
			{
				return this._EnglishRegAddr;
			}
			set
			{
				if ((this._EnglishRegAddr != value))
				{
					this.OnEnglishRegAddrChanging(value);
					this.SendPropertyChanging();
					this._EnglishRegAddr = value;
					this.SendPropertyChanged("EnglishRegAddr");
					this.OnEnglishRegAddrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactEmail", DbType="NVarChar(50)")]
		public string ContactEmail
		{
			get
			{
				return this._ContactEmail;
			}
			set
			{
				if ((this._ContactEmail != value))
				{
					this.OnContactEmailChanging(value);
					this.SendPropertyChanging();
					this._ContactEmail = value;
					this.SendPropertyChanged("ContactEmail");
					this.OnContactEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UndertakerPhone", DbType="NVarChar(20)")]
		public string UndertakerPhone
		{
			get
			{
				return this._UndertakerPhone;
			}
			set
			{
				if ((this._UndertakerPhone != value))
				{
					this.OnUndertakerPhoneChanging(value);
					this.SendPropertyChanging();
					this._UndertakerPhone = value;
					this.SendPropertyChanged("UndertakerPhone");
					this.OnUndertakerPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UndertakerFax", DbType="NVarChar(20)")]
		public string UndertakerFax
		{
			get
			{
				return this._UndertakerFax;
			}
			set
			{
				if ((this._UndertakerFax != value))
				{
					this.OnUndertakerFaxChanging(value);
					this.SendPropertyChanging();
					this._UndertakerFax = value;
					this.SendPropertyChanged("UndertakerFax");
					this.OnUndertakerFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UndertakerMobilePhone", DbType="NVarChar(20)")]
		public string UndertakerMobilePhone
		{
			get
			{
				return this._UndertakerMobilePhone;
			}
			set
			{
				if ((this._UndertakerMobilePhone != value))
				{
					this.OnUndertakerMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._UndertakerMobilePhone = value;
					this.SendPropertyChanged("UndertakerMobilePhone");
					this.OnUndertakerMobilePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceSignature", DbType="NVarChar(64)")]
		public string InvoiceSignature
		{
			get
			{
				return this._InvoiceSignature;
			}
			set
			{
				if ((this._InvoiceSignature != value))
				{
					this.OnInvoiceSignatureChanging(value);
					this.SendPropertyChanging();
					this._InvoiceSignature = value;
					this.SendPropertyChanged("InvoiceSignature");
					this.OnInvoiceSignatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UndertakerID", DbType="NVarChar(16)")]
		public string UndertakerID
		{
			get
			{
				return this._UndertakerID;
			}
			set
			{
				if ((this._UndertakerID != value))
				{
					this.OnUndertakerIDChanging(value);
					this.SendPropertyChanging();
					this._UndertakerID = value;
					this.SendPropertyChanged("UndertakerID");
					this.OnUndertakerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactTitle", DbType="NVarChar(16)")]
		public string ContactTitle
		{
			get
			{
				return this._ContactTitle;
			}
			set
			{
				if ((this._ContactTitle != value))
				{
					this.OnContactTitleChanging(value);
					this.SendPropertyChanging();
					this._ContactTitle = value;
					this.SendPropertyChanged("ContactTitle");
					this.OnContactTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_BusinessRelationship", Storage="_BusinessRelationship", ThisKey="CompanyID", OtherKey="MasterID")]
		public EntitySet<BusinessRelationship> BusinessRelationship
		{
			get
			{
				return this._BusinessRelationship;
			}
			set
			{
				this._BusinessRelationship.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_BusinessRelationship1", Storage="_BusinessRelationship1", ThisKey="CompanyID", OtherKey="RelativeID")]
		public EntitySet<BusinessRelationship> BusinessRelationship1
		{
			get
			{
				return this._BusinessRelationship1;
			}
			set
			{
				this._BusinessRelationship1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_EnterpriseGroupMember", Storage="_EnterpriseGroupMember", ThisKey="CompanyID", OtherKey="CompanyID")]
		public EntitySet<EnterpriseGroupMember> EnterpriseGroupMember
		{
			get
			{
				return this._EnterpriseGroupMember;
			}
			set
			{
				this._EnterpriseGroupMember.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_DocumentTypeFlow", Storage="_DocumentTypeFlow", ThisKey="CompanyID", OtherKey="CompanyID")]
		public EntitySet<DocumentTypeFlow> DocumentTypeFlow
		{
			get
			{
				return this._DocumentTypeFlow;
			}
			set
			{
				this._DocumentTypeFlow.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BusinessRelationship(BusinessRelationship entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_BusinessRelationship(BusinessRelationship entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_BusinessRelationship1(BusinessRelationship entity)
		{
			this.SendPropertyChanging();
			entity.Organization1 = this;
		}
		
		private void detach_BusinessRelationship1(BusinessRelationship entity)
		{
			this.SendPropertyChanging();
			entity.Organization1 = null;
		}
		
		private void attach_EnterpriseGroupMember(EnterpriseGroupMember entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_EnterpriseGroupMember(EnterpriseGroupMember entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_DocumentTypeFlow(DocumentTypeFlow entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_DocumentTypeFlow(DocumentTypeFlow entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryDefinition")]
	public partial class CategoryDefinition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _Category;
		
		private string _CharacterURL;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnCharacterURLChanging(string value);
    partial void OnCharacterURLChanged();
    #endregion
		
		public CategoryDefinition()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharacterURL", DbType="NVarChar(64)")]
		public string CharacterURL
		{
			get
			{
				return this._CharacterURL;
			}
			set
			{
				if ((this._CharacterURL != value))
				{
					this.OnCharacterURLChanging(value);
					this.SendPropertyChanging();
					this._CharacterURL = value;
					this.SendPropertyChanged("CharacterURL");
					this.OnCharacterURLChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfile")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private string _UserName;
		
		private string _PID;
		
		private string _Password;
		
		private string _ContactTitle;
		
		private string _Address;
		
		private string _City;
		
		private string _Region;
		
		private string _PostalCode;
		
		private string _Country;
		
		private string _MobilePhone;
		
		private string _Phone;
		
		private string _Phone2;
		
		private string _Fax;
		
		private string _EMail;
		
		private System.Nullable<System.DateTime> _Expiration;
		
		private System.Nullable<int> _Creator;
		
		private System.Nullable<int> _AuthID;
		
		private System.Nullable<int> _LevelID;
		
		private string _ThemeName;
		
		private string _Password2;
		
		private EntitySet<DocumentProcessLog> _DocumentProcessLog;
		
		private EntitySet<UserProfile> _UserProfile2;
		
		private EntitySet<UserProfile> _UserProfile4;
		
		private EntityRef<UserProfile> _UserProfile1;
		
		private EntityRef<UserProfile> _UserProfile3;
		
		private EntityRef<LevelExpression> _LevelExpression;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPIDChanging(string value);
    partial void OnPIDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnContactTitleChanging(string value);
    partial void OnContactTitleChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnRegionChanging(string value);
    partial void OnRegionChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnMobilePhoneChanging(string value);
    partial void OnMobilePhoneChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnPhone2Changing(string value);
    partial void OnPhone2Changed();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEMailChanging(string value);
    partial void OnEMailChanged();
    partial void OnExpirationChanging(System.Nullable<System.DateTime> value);
    partial void OnExpirationChanged();
    partial void OnCreatorChanging(System.Nullable<int> value);
    partial void OnCreatorChanged();
    partial void OnAuthIDChanging(System.Nullable<int> value);
    partial void OnAuthIDChanged();
    partial void OnLevelIDChanging(System.Nullable<int> value);
    partial void OnLevelIDChanged();
    partial void OnThemeNameChanging(string value);
    partial void OnThemeNameChanged();
    partial void OnPassword2Changing(string value);
    partial void OnPassword2Changed();
    #endregion
		
		public UserProfile()
		{
			this._DocumentProcessLog = new EntitySet<DocumentProcessLog>(new Action<DocumentProcessLog>(this.attach_DocumentProcessLog), new Action<DocumentProcessLog>(this.detach_DocumentProcessLog));
			this._UserProfile2 = new EntitySet<UserProfile>(new Action<UserProfile>(this.attach_UserProfile2), new Action<UserProfile>(this.detach_UserProfile2));
			this._UserProfile4 = new EntitySet<UserProfile>(new Action<UserProfile>(this.attach_UserProfile4), new Action<UserProfile>(this.detach_UserProfile4));
			this._UserProfile1 = default(EntityRef<UserProfile>);
			this._UserProfile3 = default(EntityRef<UserProfile>);
			this._LevelExpression = default(EntityRef<LevelExpression>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(40)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PID", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string PID
		{
			get
			{
				return this._PID;
			}
			set
			{
				if ((this._PID != value))
				{
					this.OnPIDChanging(value);
					this.SendPropertyChanging();
					this._PID = value;
					this.SendPropertyChanged("PID");
					this.OnPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(64)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactTitle", DbType="NVarChar(30)")]
		public string ContactTitle
		{
			get
			{
				return this._ContactTitle;
			}
			set
			{
				if ((this._ContactTitle != value))
				{
					this.OnContactTitleChanging(value);
					this.SendPropertyChanging();
					this._ContactTitle = value;
					this.SendPropertyChanged("ContactTitle");
					this.OnContactTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(128)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(16)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Region", DbType="NVarChar(16)")]
		public string Region
		{
			get
			{
				return this._Region;
			}
			set
			{
				if ((this._Region != value))
				{
					this.OnRegionChanging(value);
					this.SendPropertyChanging();
					this._Region = value;
					this.SendPropertyChanged("Region");
					this.OnRegionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="NVarChar(16)")]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(16)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePhone", DbType="NVarChar(24)")]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged("MobilePhone");
					this.OnMobilePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(24)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone2", DbType="NVarChar(24)")]
		public string Phone2
		{
			get
			{
				return this._Phone2;
			}
			set
			{
				if ((this._Phone2 != value))
				{
					this.OnPhone2Changing(value);
					this.SendPropertyChanging();
					this._Phone2 = value;
					this.SendPropertyChanged("Phone2");
					this.OnPhone2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="NVarChar(24)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMail", DbType="NVarChar(128)")]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this.OnEMailChanging(value);
					this.SendPropertyChanging();
					this._EMail = value;
					this.SendPropertyChanged("EMail");
					this.OnEMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expiration", DbType="DateTime")]
		public System.Nullable<System.DateTime> Expiration
		{
			get
			{
				return this._Expiration;
			}
			set
			{
				if ((this._Expiration != value))
				{
					this.OnExpirationChanging(value);
					this.SendPropertyChanging();
					this._Expiration = value;
					this.SendPropertyChanged("Expiration");
					this.OnExpirationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Creator", DbType="Int")]
		public System.Nullable<int> Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._UserProfile1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthID", DbType="Int")]
		public System.Nullable<int> AuthID
		{
			get
			{
				return this._AuthID;
			}
			set
			{
				if ((this._AuthID != value))
				{
					if (this._UserProfile3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthIDChanging(value);
					this.SendPropertyChanging();
					this._AuthID = value;
					this.SendPropertyChanged("AuthID");
					this.OnAuthIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelID", DbType="Int")]
		public System.Nullable<int> LevelID
		{
			get
			{
				return this._LevelID;
			}
			set
			{
				if ((this._LevelID != value))
				{
					if (this._LevelExpression.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLevelIDChanging(value);
					this.SendPropertyChanging();
					this._LevelID = value;
					this.SendPropertyChanged("LevelID");
					this.OnLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThemeName", DbType="NVarChar(16)")]
		public string ThemeName
		{
			get
			{
				return this._ThemeName;
			}
			set
			{
				if ((this._ThemeName != value))
				{
					this.OnThemeNameChanging(value);
					this.SendPropertyChanging();
					this._ThemeName = value;
					this.SendPropertyChanged("ThemeName");
					this.OnThemeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password2", DbType="NVarChar(64)")]
		public string Password2
		{
			get
			{
				return this._Password2;
			}
			set
			{
				if ((this._Password2 != value))
				{
					this.OnPassword2Changing(value);
					this.SendPropertyChanging();
					this._Password2 = value;
					this.SendPropertyChanged("Password2");
					this.OnPassword2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_DocumentProcessLog", Storage="_DocumentProcessLog", ThisKey="UID", OtherKey="UID")]
		public EntitySet<DocumentProcessLog> DocumentProcessLog
		{
			get
			{
				return this._DocumentProcessLog;
			}
			set
			{
				this._DocumentProcessLog.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserProfile", Storage="_UserProfile2", ThisKey="UID", OtherKey="Creator")]
		public EntitySet<UserProfile> UserProfile2
		{
			get
			{
				return this._UserProfile2;
			}
			set
			{
				this._UserProfile2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserProfile1", Storage="_UserProfile4", ThisKey="UID", OtherKey="AuthID")]
		public EntitySet<UserProfile> UserProfile4
		{
			get
			{
				return this._UserProfile4;
			}
			set
			{
				this._UserProfile4.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserProfile", Storage="_UserProfile1", ThisKey="Creator", OtherKey="UID", IsForeignKey=true)]
		public UserProfile UserProfile1
		{
			get
			{
				return this._UserProfile1.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile1.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile1.Entity = null;
						previousValue.UserProfile2.Remove(this);
					}
					this._UserProfile1.Entity = value;
					if ((value != null))
					{
						value.UserProfile2.Add(this);
						this._Creator = value.UID;
					}
					else
					{
						this._Creator = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserProfile1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserProfile1", Storage="_UserProfile3", ThisKey="AuthID", OtherKey="UID", IsForeignKey=true)]
		public UserProfile UserProfile3
		{
			get
			{
				return this._UserProfile3.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile3.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile3.Entity = null;
						previousValue.UserProfile4.Remove(this);
					}
					this._UserProfile3.Entity = value;
					if ((value != null))
					{
						value.UserProfile4.Add(this);
						this._AuthID = value.UID;
					}
					else
					{
						this._AuthID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserProfile3");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelExpression_UserProfile", Storage="_LevelExpression", ThisKey="LevelID", OtherKey="LevelID", IsForeignKey=true)]
		public LevelExpression LevelExpression
		{
			get
			{
				return this._LevelExpression.Entity;
			}
			set
			{
				LevelExpression previousValue = this._LevelExpression.Entity;
				if (((previousValue != value) 
							|| (this._LevelExpression.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LevelExpression.Entity = null;
						previousValue.UserProfile.Remove(this);
					}
					this._LevelExpression.Entity = value;
					if ((value != null))
					{
						value.UserProfile.Add(this);
						this._LevelID = value.LevelID;
					}
					else
					{
						this._LevelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LevelExpression");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocumentProcessLog(DocumentProcessLog entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_DocumentProcessLog(DocumentProcessLog entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_UserProfile2(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile1 = this;
		}
		
		private void detach_UserProfile2(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile1 = null;
		}
		
		private void attach_UserProfile4(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile3 = this;
		}
		
		private void detach_UserProfile4(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile3 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LevelExpression")]
	public partial class LevelExpression : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LevelID;
		
		private string _Expression;
		
		private string _Description;
		
		private EntitySet<DocumentFlowControl> _DocumentFlowControl;
		
		private EntitySet<CDS_Document> _CDS_Document;
		
		private EntitySet<DocumentProcessLog> _DocumentProcessLog;
		
		private EntitySet<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLevelIDChanging(int value);
    partial void OnLevelIDChanged();
    partial void OnExpressionChanging(string value);
    partial void OnExpressionChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public LevelExpression()
		{
			this._DocumentFlowControl = new EntitySet<DocumentFlowControl>(new Action<DocumentFlowControl>(this.attach_DocumentFlowControl), new Action<DocumentFlowControl>(this.detach_DocumentFlowControl));
			this._CDS_Document = new EntitySet<CDS_Document>(new Action<CDS_Document>(this.attach_CDS_Document), new Action<CDS_Document>(this.detach_CDS_Document));
			this._DocumentProcessLog = new EntitySet<DocumentProcessLog>(new Action<DocumentProcessLog>(this.attach_DocumentProcessLog), new Action<DocumentProcessLog>(this.detach_DocumentProcessLog));
			this._UserProfile = new EntitySet<UserProfile>(new Action<UserProfile>(this.attach_UserProfile), new Action<UserProfile>(this.detach_UserProfile));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LevelID
		{
			get
			{
				return this._LevelID;
			}
			set
			{
				if ((this._LevelID != value))
				{
					this.OnLevelIDChanging(value);
					this.SendPropertyChanging();
					this._LevelID = value;
					this.SendPropertyChanged("LevelID");
					this.OnLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expression", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Expression
		{
			get
			{
				return this._Expression;
			}
			set
			{
				if ((this._Expression != value))
				{
					this.OnExpressionChanging(value);
					this.SendPropertyChanging();
					this._Expression = value;
					this.SendPropertyChanged("Expression");
					this.OnExpressionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelExpression_DocumentFlowControl", Storage="_DocumentFlowControl", ThisKey="LevelID", OtherKey="LevelID")]
		public EntitySet<DocumentFlowControl> DocumentFlowControl
		{
			get
			{
				return this._DocumentFlowControl;
			}
			set
			{
				this._DocumentFlowControl.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelExpression_CDS_Document", Storage="_CDS_Document", ThisKey="LevelID", OtherKey="CurrentStep")]
		public EntitySet<CDS_Document> CDS_Document
		{
			get
			{
				return this._CDS_Document;
			}
			set
			{
				this._CDS_Document.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelExpression_DocumentProcessLog", Storage="_DocumentProcessLog", ThisKey="LevelID", OtherKey="FlowStep")]
		public EntitySet<DocumentProcessLog> DocumentProcessLog
		{
			get
			{
				return this._DocumentProcessLog;
			}
			set
			{
				this._DocumentProcessLog.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LevelExpression_UserProfile", Storage="_UserProfile", ThisKey="LevelID", OtherKey="LevelID")]
		public EntitySet<UserProfile> UserProfile
		{
			get
			{
				return this._UserProfile;
			}
			set
			{
				this._UserProfile.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocumentFlowControl(DocumentFlowControl entity)
		{
			this.SendPropertyChanging();
			entity.LevelExpression = this;
		}
		
		private void detach_DocumentFlowControl(DocumentFlowControl entity)
		{
			this.SendPropertyChanging();
			entity.LevelExpression = null;
		}
		
		private void attach_CDS_Document(CDS_Document entity)
		{
			this.SendPropertyChanging();
			entity.LevelExpression = this;
		}
		
		private void detach_CDS_Document(CDS_Document entity)
		{
			this.SendPropertyChanging();
			entity.LevelExpression = null;
		}
		
		private void attach_DocumentProcessLog(DocumentProcessLog entity)
		{
			this.SendPropertyChanging();
			entity.LevelExpression = this;
		}
		
		private void detach_DocumentProcessLog(DocumentProcessLog entity)
		{
			this.SendPropertyChanging();
			entity.LevelExpression = null;
		}
		
		private void attach_UserProfile(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.LevelExpression = this;
		}
		
		private void detach_UserProfile(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.LevelExpression = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="center.BusinessRelationship")]
	public partial class BusinessRelationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MasterID;
		
		private int _RelativeID;
		
		private int _BusinessID;
		
		private EntityRef<Organization> _Organization;
		
		private EntityRef<Organization> _Organization1;
		
		private EntityRef<BusinessType> _BusinessType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMasterIDChanging(int value);
    partial void OnMasterIDChanged();
    partial void OnRelativeIDChanging(int value);
    partial void OnRelativeIDChanged();
    partial void OnBusinessIDChanging(int value);
    partial void OnBusinessIDChanged();
    #endregion
		
		public BusinessRelationship()
		{
			this._Organization = default(EntityRef<Organization>);
			this._Organization1 = default(EntityRef<Organization>);
			this._BusinessType = default(EntityRef<BusinessType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MasterID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MasterID
		{
			get
			{
				return this._MasterID;
			}
			set
			{
				if ((this._MasterID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMasterIDChanging(value);
					this.SendPropertyChanging();
					this._MasterID = value;
					this.SendPropertyChanged("MasterID");
					this.OnMasterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelativeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RelativeID
		{
			get
			{
				return this._RelativeID;
			}
			set
			{
				if ((this._RelativeID != value))
				{
					if (this._Organization1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelativeIDChanging(value);
					this.SendPropertyChanging();
					this._RelativeID = value;
					this.SendPropertyChanged("RelativeID");
					this.OnRelativeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BusinessID
		{
			get
			{
				return this._BusinessID;
			}
			set
			{
				if ((this._BusinessID != value))
				{
					if (this._BusinessType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessID = value;
					this.SendPropertyChanged("BusinessID");
					this.OnBusinessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_BusinessRelationship", Storage="_Organization", ThisKey="MasterID", OtherKey="CompanyID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.BusinessRelationship.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.BusinessRelationship.Add(this);
						this._MasterID = value.CompanyID;
					}
					else
					{
						this._MasterID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_BusinessRelationship1", Storage="_Organization1", ThisKey="RelativeID", OtherKey="CompanyID", IsForeignKey=true)]
		public Organization Organization1
		{
			get
			{
				return this._Organization1.Entity;
			}
			set
			{
				Organization previousValue = this._Organization1.Entity;
				if (((previousValue != value) 
							|| (this._Organization1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization1.Entity = null;
						previousValue.BusinessRelationship1.Remove(this);
					}
					this._Organization1.Entity = value;
					if ((value != null))
					{
						value.BusinessRelationship1.Add(this);
						this._RelativeID = value.CompanyID;
					}
					else
					{
						this._RelativeID = default(int);
					}
					this.SendPropertyChanged("Organization1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessType_BusinessRelationship", Storage="_BusinessType", ThisKey="BusinessID", OtherKey="BusinessID", IsForeignKey=true)]
		public BusinessType BusinessType
		{
			get
			{
				return this._BusinessType.Entity;
			}
			set
			{
				BusinessType previousValue = this._BusinessType.Entity;
				if (((previousValue != value) 
							|| (this._BusinessType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessType.Entity = null;
						previousValue.BusinessRelationship.Remove(this);
					}
					this._BusinessType.Entity = value;
					if ((value != null))
					{
						value.BusinessRelationship.Add(this);
						this._BusinessID = value.BusinessID;
					}
					else
					{
						this._BusinessID = default(int);
					}
					this.SendPropertyChanged("BusinessType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EnterpriseGroup")]
	public partial class EnterpriseGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EnterpriseID;
		
		private string _EnterpriseName;
		
		private EntitySet<EnterpriseGroupMember> _EnterpriseGroupMember;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEnterpriseIDChanging(int value);
    partial void OnEnterpriseIDChanged();
    partial void OnEnterpriseNameChanging(string value);
    partial void OnEnterpriseNameChanged();
    #endregion
		
		public EnterpriseGroup()
		{
			this._EnterpriseGroupMember = new EntitySet<EnterpriseGroupMember>(new Action<EnterpriseGroupMember>(this.attach_EnterpriseGroupMember), new Action<EnterpriseGroupMember>(this.detach_EnterpriseGroupMember));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterpriseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EnterpriseID
		{
			get
			{
				return this._EnterpriseID;
			}
			set
			{
				if ((this._EnterpriseID != value))
				{
					this.OnEnterpriseIDChanging(value);
					this.SendPropertyChanging();
					this._EnterpriseID = value;
					this.SendPropertyChanged("EnterpriseID");
					this.OnEnterpriseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterpriseName", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string EnterpriseName
		{
			get
			{
				return this._EnterpriseName;
			}
			set
			{
				if ((this._EnterpriseName != value))
				{
					this.OnEnterpriseNameChanging(value);
					this.SendPropertyChanging();
					this._EnterpriseName = value;
					this.SendPropertyChanged("EnterpriseName");
					this.OnEnterpriseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EnterpriseGroup_EnterpriseGroupMember", Storage="_EnterpriseGroupMember", ThisKey="EnterpriseID", OtherKey="EnterpriseID")]
		public EntitySet<EnterpriseGroupMember> EnterpriseGroupMember
		{
			get
			{
				return this._EnterpriseGroupMember;
			}
			set
			{
				this._EnterpriseGroupMember.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EnterpriseGroupMember(EnterpriseGroupMember entity)
		{
			this.SendPropertyChanging();
			entity.EnterpriseGroup = this;
		}
		
		private void detach_EnterpriseGroupMember(EnterpriseGroupMember entity)
		{
			this.SendPropertyChanging();
			entity.EnterpriseGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EnterpriseGroupMember")]
	public partial class EnterpriseGroupMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EnterpriseID;
		
		private int _CompanyID;
		
		private EntityRef<EnterpriseGroup> _EnterpriseGroup;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEnterpriseIDChanging(int value);
    partial void OnEnterpriseIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    #endregion
		
		public EnterpriseGroupMember()
		{
			this._EnterpriseGroup = default(EntityRef<EnterpriseGroup>);
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterpriseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EnterpriseID
		{
			get
			{
				return this._EnterpriseID;
			}
			set
			{
				if ((this._EnterpriseID != value))
				{
					if (this._EnterpriseGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnterpriseIDChanging(value);
					this.SendPropertyChanging();
					this._EnterpriseID = value;
					this.SendPropertyChanged("EnterpriseID");
					this.OnEnterpriseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EnterpriseGroup_EnterpriseGroupMember", Storage="_EnterpriseGroup", ThisKey="EnterpriseID", OtherKey="EnterpriseID", IsForeignKey=true)]
		public EnterpriseGroup EnterpriseGroup
		{
			get
			{
				return this._EnterpriseGroup.Entity;
			}
			set
			{
				EnterpriseGroup previousValue = this._EnterpriseGroup.Entity;
				if (((previousValue != value) 
							|| (this._EnterpriseGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EnterpriseGroup.Entity = null;
						previousValue.EnterpriseGroupMember.Remove(this);
					}
					this._EnterpriseGroup.Entity = value;
					if ((value != null))
					{
						value.EnterpriseGroupMember.Add(this);
						this._EnterpriseID = value.EnterpriseID;
					}
					else
					{
						this._EnterpriseID = default(int);
					}
					this.SendPropertyChanged("EnterpriseGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_EnterpriseGroupMember", Storage="_Organization", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.EnterpriseGroupMember.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.EnterpriseGroupMember.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="center.DocumentTypeFlow")]
	public partial class DocumentTypeFlow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeID;
		
		private int _FlowID;
		
		private int _CompanyID;
		
		private int _BusinessID;
		
		private EntityRef<DocumentType> _DocumentType;
		
		private EntityRef<Organization> _Organization;
		
		private EntityRef<BusinessType> _BusinessType;
		
		private EntityRef<DocumentFlow> _DocumentFlow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnFlowIDChanging(int value);
    partial void OnFlowIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnBusinessIDChanging(int value);
    partial void OnBusinessIDChanged();
    #endregion
		
		public DocumentTypeFlow()
		{
			this._DocumentType = default(EntityRef<DocumentType>);
			this._Organization = default(EntityRef<Organization>);
			this._BusinessType = default(EntityRef<BusinessType>);
			this._DocumentFlow = default(EntityRef<DocumentFlow>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._DocumentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlowID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FlowID
		{
			get
			{
				return this._FlowID;
			}
			set
			{
				if ((this._FlowID != value))
				{
					if (this._DocumentFlow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFlowIDChanging(value);
					this.SendPropertyChanging();
					this._FlowID = value;
					this.SendPropertyChanged("FlowID");
					this.OnFlowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BusinessID
		{
			get
			{
				return this._BusinessID;
			}
			set
			{
				if ((this._BusinessID != value))
				{
					if (this._BusinessType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessID = value;
					this.SendPropertyChanged("BusinessID");
					this.OnBusinessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentType_DocumentTypeFlow", Storage="_DocumentType", ThisKey="TypeID", OtherKey="TypeID", IsForeignKey=true)]
		public DocumentType DocumentType
		{
			get
			{
				return this._DocumentType.Entity;
			}
			set
			{
				DocumentType previousValue = this._DocumentType.Entity;
				if (((previousValue != value) 
							|| (this._DocumentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentType.Entity = null;
						previousValue.DocumentTypeFlow.Remove(this);
					}
					this._DocumentType.Entity = value;
					if ((value != null))
					{
						value.DocumentTypeFlow.Add(this);
						this._TypeID = value.TypeID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("DocumentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_DocumentTypeFlow", Storage="_Organization", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.DocumentTypeFlow.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.DocumentTypeFlow.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessType_DocumentTypeFlow", Storage="_BusinessType", ThisKey="BusinessID", OtherKey="BusinessID", IsForeignKey=true)]
		public BusinessType BusinessType
		{
			get
			{
				return this._BusinessType.Entity;
			}
			set
			{
				BusinessType previousValue = this._BusinessType.Entity;
				if (((previousValue != value) 
							|| (this._BusinessType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessType.Entity = null;
						previousValue.DocumentTypeFlow.Remove(this);
					}
					this._BusinessType.Entity = value;
					if ((value != null))
					{
						value.DocumentTypeFlow.Add(this);
						this._BusinessID = value.BusinessID;
					}
					else
					{
						this._BusinessID = default(int);
					}
					this.SendPropertyChanged("BusinessType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentFlow_DocumentTypeFlow", Storage="_DocumentFlow", ThisKey="FlowID", OtherKey="FlowID", IsForeignKey=true)]
		public DocumentFlow DocumentFlow
		{
			get
			{
				return this._DocumentFlow.Entity;
			}
			set
			{
				DocumentFlow previousValue = this._DocumentFlow.Entity;
				if (((previousValue != value) 
							|| (this._DocumentFlow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentFlow.Entity = null;
						previousValue.DocumentTypeFlow.Remove(this);
					}
					this._DocumentFlow.Entity = value;
					if ((value != null))
					{
						value.DocumentTypeFlow.Add(this);
						this._FlowID = value.FlowID;
					}
					else
					{
						this._FlowID = default(int);
					}
					this.SendPropertyChanged("DocumentFlow");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="center.BusinessType")]
	public partial class BusinessType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BusinessID;
		
		private string _Business;
		
		private EntitySet<BusinessRelationship> _BusinessRelationship;
		
		private EntitySet<DocumentTypeFlow> _DocumentTypeFlow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBusinessIDChanging(int value);
    partial void OnBusinessIDChanged();
    partial void OnBusinessChanging(string value);
    partial void OnBusinessChanged();
    #endregion
		
		public BusinessType()
		{
			this._BusinessRelationship = new EntitySet<BusinessRelationship>(new Action<BusinessRelationship>(this.attach_BusinessRelationship), new Action<BusinessRelationship>(this.detach_BusinessRelationship));
			this._DocumentTypeFlow = new EntitySet<DocumentTypeFlow>(new Action<DocumentTypeFlow>(this.attach_DocumentTypeFlow), new Action<DocumentTypeFlow>(this.detach_DocumentTypeFlow));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BusinessID
		{
			get
			{
				return this._BusinessID;
			}
			set
			{
				if ((this._BusinessID != value))
				{
					this.OnBusinessIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessID = value;
					this.SendPropertyChanged("BusinessID");
					this.OnBusinessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Business", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Business
		{
			get
			{
				return this._Business;
			}
			set
			{
				if ((this._Business != value))
				{
					this.OnBusinessChanging(value);
					this.SendPropertyChanging();
					this._Business = value;
					this.SendPropertyChanged("Business");
					this.OnBusinessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessType_BusinessRelationship", Storage="_BusinessRelationship", ThisKey="BusinessID", OtherKey="BusinessID")]
		public EntitySet<BusinessRelationship> BusinessRelationship
		{
			get
			{
				return this._BusinessRelationship;
			}
			set
			{
				this._BusinessRelationship.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessType_DocumentTypeFlow", Storage="_DocumentTypeFlow", ThisKey="BusinessID", OtherKey="BusinessID")]
		public EntitySet<DocumentTypeFlow> DocumentTypeFlow
		{
			get
			{
				return this._DocumentTypeFlow;
			}
			set
			{
				this._DocumentTypeFlow.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BusinessRelationship(BusinessRelationship entity)
		{
			this.SendPropertyChanging();
			entity.BusinessType = this;
		}
		
		private void detach_BusinessRelationship(BusinessRelationship entity)
		{
			this.SendPropertyChanging();
			entity.BusinessType = null;
		}
		
		private void attach_DocumentTypeFlow(DocumentTypeFlow entity)
		{
			this.SendPropertyChanging();
			entity.BusinessType = this;
		}
		
		private void detach_DocumentTypeFlow(DocumentTypeFlow entity)
		{
			this.SendPropertyChanging();
			entity.BusinessType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="center.CommonDocumentTypeFlow")]
	public partial class CommonDocumentTypeFlow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeID;
		
		private int _FlowID;
		
		private EntityRef<DocumentType> _DocumentType;
		
		private EntityRef<DocumentFlow> _DocumentFlow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnFlowIDChanging(int value);
    partial void OnFlowIDChanged();
    #endregion
		
		public CommonDocumentTypeFlow()
		{
			this._DocumentType = default(EntityRef<DocumentType>);
			this._DocumentFlow = default(EntityRef<DocumentFlow>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._DocumentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlowID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FlowID
		{
			get
			{
				return this._FlowID;
			}
			set
			{
				if ((this._FlowID != value))
				{
					if (this._DocumentFlow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFlowIDChanging(value);
					this.SendPropertyChanging();
					this._FlowID = value;
					this.SendPropertyChanged("FlowID");
					this.OnFlowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentType_CommonDocumentTypeFlow", Storage="_DocumentType", ThisKey="TypeID", OtherKey="TypeID", IsForeignKey=true)]
		public DocumentType DocumentType
		{
			get
			{
				return this._DocumentType.Entity;
			}
			set
			{
				DocumentType previousValue = this._DocumentType.Entity;
				if (((previousValue != value) 
							|| (this._DocumentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentType.Entity = null;
						previousValue.CommonDocumentTypeFlow.Remove(this);
					}
					this._DocumentType.Entity = value;
					if ((value != null))
					{
						value.CommonDocumentTypeFlow.Add(this);
						this._TypeID = value.TypeID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("DocumentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentFlow_CommonDocumentTypeFlow", Storage="_DocumentFlow", ThisKey="FlowID", OtherKey="FlowID", IsForeignKey=true)]
		public DocumentFlow DocumentFlow
		{
			get
			{
				return this._DocumentFlow.Entity;
			}
			set
			{
				DocumentFlow previousValue = this._DocumentFlow.Entity;
				if (((previousValue != value) 
							|| (this._DocumentFlow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocumentFlow.Entity = null;
						previousValue.CommonDocumentTypeFlow.Remove(this);
					}
					this._DocumentFlow.Entity = value;
					if ((value != null))
					{
						value.CommonDocumentTypeFlow.Add(this);
						this._FlowID = value.FlowID;
					}
					else
					{
						this._FlowID = default(int);
					}
					this.SendPropertyChanged("DocumentFlow");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="center.DocumentFlowBranch")]
	public partial class DocumentFlowBranch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StepID;
		
		private int _BranchStep;
		
		private EntityRef<DocumentFlowControl> _BranchStepFrom;
		
		private EntityRef<DocumentFlowControl> _BranchStepItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStepIDChanging(int value);
    partial void OnStepIDChanged();
    partial void OnBranchStepChanging(int value);
    partial void OnBranchStepChanged();
    #endregion
		
		public DocumentFlowBranch()
		{
			this._BranchStepFrom = default(EntityRef<DocumentFlowControl>);
			this._BranchStepItem = default(EntityRef<DocumentFlowControl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StepID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StepID
		{
			get
			{
				return this._StepID;
			}
			set
			{
				if ((this._StepID != value))
				{
					if (this._BranchStepFrom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStepIDChanging(value);
					this.SendPropertyChanging();
					this._StepID = value;
					this.SendPropertyChanged("StepID");
					this.OnStepIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchStep", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BranchStep
		{
			get
			{
				return this._BranchStep;
			}
			set
			{
				if ((this._BranchStep != value))
				{
					if (this._BranchStepItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranchStepChanging(value);
					this.SendPropertyChanging();
					this._BranchStep = value;
					this.SendPropertyChanged("BranchStep");
					this.OnBranchStepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentFlowControl_DocumentFlowBranch", Storage="_BranchStepFrom", ThisKey="StepID", OtherKey="StepID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public DocumentFlowControl BranchStepFrom
		{
			get
			{
				return this._BranchStepFrom.Entity;
			}
			set
			{
				DocumentFlowControl previousValue = this._BranchStepFrom.Entity;
				if (((previousValue != value) 
							|| (this._BranchStepFrom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BranchStepFrom.Entity = null;
						previousValue.BranchFlow.Remove(this);
					}
					this._BranchStepFrom.Entity = value;
					if ((value != null))
					{
						value.BranchFlow.Add(this);
						this._StepID = value.StepID;
					}
					else
					{
						this._StepID = default(int);
					}
					this.SendPropertyChanged("BranchStepFrom");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentFlowControl_DocumentFlowBranch1", Storage="_BranchStepItem", ThisKey="BranchStep", OtherKey="StepID", IsForeignKey=true)]
		public DocumentFlowControl BranchStepItem
		{
			get
			{
				return this._BranchStepItem.Entity;
			}
			set
			{
				DocumentFlowControl previousValue = this._BranchStepItem.Entity;
				if (((previousValue != value) 
							|| (this._BranchStepItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BranchStepItem.Entity = null;
						previousValue.FlowAsBranch.Remove(this);
					}
					this._BranchStepItem.Entity = value;
					if ((value != null))
					{
						value.FlowAsBranch.Add(this);
						this._BranchStep = value.StepID;
					}
					else
					{
						this._BranchStep = default(int);
					}
					this.SendPropertyChanged("BranchStepItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="center.DocumentFlow")]
	public partial class DocumentFlow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FlowID;
		
		private string _FlowName;
		
		private System.Nullable<int> _InitialStep;
		
		private EntitySet<DocumentFlowControl> _DocumentFlowControl;
		
		private EntitySet<DocumentTypeFlow> _DocumentTypeFlow;
		
		private EntitySet<CommonDocumentTypeFlow> _CommonDocumentTypeFlow;
		
		private EntityRef<DocumentFlowControl> _InitStepItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFlowIDChanging(int value);
    partial void OnFlowIDChanged();
    partial void OnFlowNameChanging(string value);
    partial void OnFlowNameChanged();
    partial void OnInitialStepChanging(System.Nullable<int> value);
    partial void OnInitialStepChanged();
    #endregion
		
		public DocumentFlow()
		{
			this._DocumentFlowControl = new EntitySet<DocumentFlowControl>(new Action<DocumentFlowControl>(this.attach_DocumentFlowControl), new Action<DocumentFlowControl>(this.detach_DocumentFlowControl));
			this._DocumentTypeFlow = new EntitySet<DocumentTypeFlow>(new Action<DocumentTypeFlow>(this.attach_DocumentTypeFlow), new Action<DocumentTypeFlow>(this.detach_DocumentTypeFlow));
			this._CommonDocumentTypeFlow = new EntitySet<CommonDocumentTypeFlow>(new Action<CommonDocumentTypeFlow>(this.attach_CommonDocumentTypeFlow), new Action<CommonDocumentTypeFlow>(this.detach_CommonDocumentTypeFlow));
			this._InitStepItem = default(EntityRef<DocumentFlowControl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlowID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FlowID
		{
			get
			{
				return this._FlowID;
			}
			set
			{
				if ((this._FlowID != value))
				{
					this.OnFlowIDChanging(value);
					this.SendPropertyChanging();
					this._FlowID = value;
					this.SendPropertyChanged("FlowID");
					this.OnFlowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlowName", DbType="NVarChar(64)")]
		public string FlowName
		{
			get
			{
				return this._FlowName;
			}
			set
			{
				if ((this._FlowName != value))
				{
					this.OnFlowNameChanging(value);
					this.SendPropertyChanging();
					this._FlowName = value;
					this.SendPropertyChanged("FlowName");
					this.OnFlowNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitialStep", DbType="Int")]
		public System.Nullable<int> InitialStep
		{
			get
			{
				return this._InitialStep;
			}
			set
			{
				if ((this._InitialStep != value))
				{
					if (this._InitStepItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInitialStepChanging(value);
					this.SendPropertyChanging();
					this._InitialStep = value;
					this.SendPropertyChanged("InitialStep");
					this.OnInitialStepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentFlow_DocumentFlowControl", Storage="_DocumentFlowControl", ThisKey="FlowID", OtherKey="FlowID")]
		public EntitySet<DocumentFlowControl> DocumentFlowControl
		{
			get
			{
				return this._DocumentFlowControl;
			}
			set
			{
				this._DocumentFlowControl.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentFlow_DocumentTypeFlow", Storage="_DocumentTypeFlow", ThisKey="FlowID", OtherKey="FlowID")]
		public EntitySet<DocumentTypeFlow> DocumentTypeFlow
		{
			get
			{
				return this._DocumentTypeFlow;
			}
			set
			{
				this._DocumentTypeFlow.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentFlow_CommonDocumentTypeFlow", Storage="_CommonDocumentTypeFlow", ThisKey="FlowID", OtherKey="FlowID")]
		public EntitySet<CommonDocumentTypeFlow> CommonDocumentTypeFlow
		{
			get
			{
				return this._CommonDocumentTypeFlow;
			}
			set
			{
				this._CommonDocumentTypeFlow.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocumentFlowControl_DocumentFlow", Storage="_InitStepItem", ThisKey="InitialStep", OtherKey="StepID", IsForeignKey=true)]
		public DocumentFlowControl InitStepItem
		{
			get
			{
				return this._InitStepItem.Entity;
			}
			set
			{
				DocumentFlowControl previousValue = this._InitStepItem.Entity;
				if (((previousValue != value) 
							|| (this._InitStepItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InitStepItem.Entity = null;
						previousValue.DocumentFlowAsInitStep.Remove(this);
					}
					this._InitStepItem.Entity = value;
					if ((value != null))
					{
						value.DocumentFlowAsInitStep.Add(this);
						this._InitialStep = value.StepID;
					}
					else
					{
						this._InitialStep = default(Nullable<int>);
					}
					this.SendPropertyChanged("InitStepItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocumentFlowControl(DocumentFlowControl entity)
		{
			this.SendPropertyChanging();
			entity.DocumentFlow = this;
		}
		
		private void detach_DocumentFlowControl(DocumentFlowControl entity)
		{
			this.SendPropertyChanging();
			entity.DocumentFlow = null;
		}
		
		private void attach_DocumentTypeFlow(DocumentTypeFlow entity)
		{
			this.SendPropertyChanging();
			entity.DocumentFlow = this;
		}
		
		private void detach_DocumentTypeFlow(DocumentTypeFlow entity)
		{
			this.SendPropertyChanging();
			entity.DocumentFlow = null;
		}
		
		private void attach_CommonDocumentTypeFlow(CommonDocumentTypeFlow entity)
		{
			this.SendPropertyChanging();
			entity.DocumentFlow = this;
		}
		
		private void detach_CommonDocumentTypeFlow(CommonDocumentTypeFlow entity)
		{
			this.SendPropertyChanging();
			entity.DocumentFlow = null;
		}
	}
}
#pragma warning restore 1591
